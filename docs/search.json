[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PrimerosPasosEnR",
    "section": "",
    "text": "Inicio"
  },
  {
    "objectID": "index.html#una-breve-guía",
    "href": "index.html#una-breve-guía",
    "title": "PrimerosPasosEnR",
    "section": "Una breve guía",
    "text": "Una breve guía\nEste documento te permitirá dar los primeros pasos en R. La idea es que puedas comprender los aspectos generales de la historia, estructura de datos y objetos básicos en R.\nLa guía tiene seis capítulos orientados a conocer aquellos códigos que te servirán para soltar la mano y no perder la confianza en lo útil que puede llegar a ser aprender sobre pensamiento crítico, programación y datos. El primer capítulo se llama Para comenzar está orientado a que tengas las referencias si es que no has instalado el R en tu computador. También contiene orientaciones generales sobre conceptos como IDE y versión.\nEl segundo capítulo llamado Primeros pasos busca entregar una panorámica general sobre los tipos de datos en R. Te ayudará a comprender que que diferencia hay entre un número y una letra. Está más enfocado a la programación básica en R. Cuando estamos comenzando puede ser un capitulo al que volvamos frecuentemente, mientras avanzamos en la práctica de R.\nEl tercer capítulo Historia está pensado para que tengas una idea de los orígenes de R y algunos hitos importantes.\nEn el cuarto capítulo, ¿Qué es R Base? se revisan conceptos generables de R algunos códigos de utilidad y la creación de funciones, algo muy importante en el uso de R.\nPara comenzar a entrenar, en el quinto capítulo Presentaciones con RMD se proponen algunas utilidades para implementar el codigo y darle estilos a los trabajos escritos o presentaciones.\nEl capitulo siguiente (sexto capítulo) siempre está en construcción y pronto será publicado\nLas referencias te permitirán conocer algunos sitios recomendables para tu autoaprendizaje."
  },
  {
    "objectID": "comenzar.html",
    "href": "comenzar.html",
    "title": "1  Para comenzar",
    "section": "",
    "text": "2 Un IDE\nEn pocas palabras el IDE es donde escribes el codigo y trabajar la mayor parte del tiempo. Su aspecto positivo es que permite visualizar resultados y realizar tareas utilizando botones y una interfaz integradas, por lo que puede ser útil cuando estás comenzando.\nUno de los IDE más populares de R, es RStudio. El IDE es un programa, por lo que también lo debes descargar e instalar. Puedes hacerlo acá: POSIT - RSTUDIO. Posit es la empresa que creó RStudio.\nTambién puede usar otros IDE’s, o escribir en tu consola o en un libro de notas, el objetivo es que utilices lo que te sea más cómodo para trabajar.\nTanto R como RStudio, tienen versiones. Una versión es generalmente asociada a un número. dependiendo de la cantidad de cambios significativos para funcionar que tenga el programa en el tiempo, es probable que tenga muchas o pocas versiones.\nRecordemos que R es parte de lo que podemos llamar software libre o código abierto es decir, puedes descargar el código desde CRAN y modificarlo. Eso ha sido positivo para que muchas personas puedan crear sus propios avances o programas con R.\nPuede que tu interés no vaya a esos aspectos de R, de todas formas, saber la versión de tu programa es importante. Si instalaste R hace años y luego no lo seguiste usando y ahora lo quieres usar para seguir estos primeros pasos, puedes tomar en cuenta el código:\nversion \n\n               _                                \nplatform       x86_64-w64-mingw32               \narch           x86_64                           \nos             mingw32                          \ncrt            ucrt                             \nsystem         x86_64, mingw32                  \nstatus                                          \nmajor          4                                \nminor          4.1                              \nyear           2024                             \nmonth          06                               \nday            14                               \nsvn rev        86737                            \nlanguage       R                                \nversion.string R version 4.4.1 (2024-06-14 ucrt)\nnickname       Race for Your Life\nSoló con que escribas version en la consola y presiones enter, podrás tener información de la versión. Debes fijarte en version.string y podrás saber la versión."
  },
  {
    "objectID": "comenzar.html#instalar-r",
    "href": "comenzar.html#instalar-r",
    "title": "1  Para comenzar",
    "section": "1.1 Instalar R",
    "text": "1.1 Instalar R\nSi nunca has instalado un programa de computadora en tu vida, quizás sea recomendable que pidas apoyo para la instalación. Si has instalado un programa antes, hacerlo con R no debería ser más complejo.\nUn fuente “oficial” para descargar R es CRAN (del inglés Comprehensive R Archive Network) algo así como el gran repositorio de R. Puedes acceder haciendo clik acá: CRAN.\nEn ese sitio puedes descargar R, para Linux, Windows o Mac. Luego puedes trabajar con tu IDE favorito. No sabes qué es un IDE, para más referencias puede visitar la clase abierta la clase abierta de nuestra Escuela de Datos."
  },
  {
    "objectID": "primerospasos.html#números",
    "href": "primerospasos.html#números",
    "title": "2  Tipos de datos",
    "section": "2.1 Números",
    "text": "2.1 Números\nLos números pueden ser enteros o números decimales.\n\n# Número entero\nx &lt;- 5\nprint(x)\n\n[1] 5\n\n# Número decimal\ny &lt;- 5.5\nprint(y)\n\n[1] 5.5"
  },
  {
    "objectID": "primerospasos.html#cadena-de-texto",
    "href": "primerospasos.html#cadena-de-texto",
    "title": "2  Tipos de datos",
    "section": "2.2 Cadena de texto",
    "text": "2.2 Cadena de texto\nLas cadenas de texto se representan usando comillas simples o dobles.\n\ntexto &lt;- \"Hola, mundo!\"\n\n\nprint(texto)\n\n[1] \"Hola, mundo!\""
  },
  {
    "objectID": "primerospasos.html#valores-lógicos",
    "href": "primerospasos.html#valores-lógicos",
    "title": "2  Tipos de datos",
    "section": "2.3 Valores lógicos",
    "text": "2.3 Valores lógicos\nLos valores lógicos (booleanos) pueden ser TRUE o FALSE. Los valores lógicos se usan comúnmente para realizar operaciones condicionales.\n\n# Valores lógicos\nverdadero &lt;- TRUE\nfalso &lt;- FALSE\nprint(verdadero)\n\n[1] TRUE\n\nprint(falso)\n\n[1] FALSE"
  },
  {
    "objectID": "primerospasos.html#vectores",
    "href": "primerospasos.html#vectores",
    "title": "2  Tipos de datos",
    "section": "2.4 Vectores",
    "text": "2.4 Vectores\nUn vector es una secuencia de datos del mismo tipo. Puedes crear vectores usando la función c().\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n# Vector de caracteres\ncadenas &lt;- c(\"uno\", \"dos\", \"tres\")\nprint(cadenas)\n\n[1] \"uno\"  \"dos\"  \"tres\"\n\n# Vector lógico\nlogicos &lt;- c(TRUE, FALSE, TRUE)\nprint(logicos)\n\n[1]  TRUE FALSE  TRUE\n\n# Nuevo vector\n# ¿Qué ocurre si en un mismo vector dejamos character y numeric?\ncombinado &lt;- c(1,2,3,\"cuatro\", \"cinco\")\n\n# El resultado es un vector de \"character\". \ncombinado\n\n[1] \"1\"      \"2\"      \"3\"      \"cuatro\" \"cinco\" \n\n# Confirmamos la clase del vector con la función `class()`\nclass(combinado)\n\n[1] \"character\"\n\n# A lo anterior se le ha llamado, \"coerción\""
  },
  {
    "objectID": "primerospasos.html#coerción",
    "href": "primerospasos.html#coerción",
    "title": "2  Tipos de datos",
    "section": "2.5 Coerción",
    "text": "2.5 Coerción\nEn R, la coerción de vectores se refiere al proceso de conversión automática de los elementos de un vector a un tipo de datos común cuando los elementos originales son de tipos diferentes. Esto se hace para asegurar que todas las operaciones en los vectores se realicen de manera consistente y sin errores. R sigue una jerarquía específica de tipos de datos para realizar esta conversión.\nJerarquía de Coerción R tiene una jerarquía de tipos de datos que determina cómo se realiza la coerción. La jerarquía de coerción en R es la siguiente (de menor a mayor):\n\nLogical (Lógico): TRUE, FALSE\nInteger (Entero): Números enteros\nNumeric (Numérico o Double): Números reales\nComplex (Complejo): Números complejos\nCharacter (Carácter): Cadenas de texto\nList (Lista): Colecciones de elementos\n\nCuando se combinan elementos de diferentes tipos en un vector, R los convierte automáticamente al tipo de datos “más alto” en la jerarquía.\n** lógico -&gt; entero -&gt; numérico -&gt; cadena de texto (logical -&gt; integer -&gt; numeric -&gt; character) **\n\n2.5.1 1. Coerción de Logical a Integer\n\nvec &lt;- c(TRUE, FALSE, 1)\nprint(vec)  # Output: 1 0 1\n\n[1] 1 0 1\n\n\nEn este ejemplo, TRUE se convierte a 1 y FALSE se convierte a 0.\n\n\n2.5.2 2. Coerción de Integer a Numeric\n\nvec &lt;- c(1L, 2.5)\nprint(vec)  # Output: 1.0 2.5\n\n[1] 1.0 2.5\n\n\nEl número entero 1L se convierte a 1.0 para coincidir con el número numérico 2.5.\n\n\n2.5.3 3. Coerción de Numeric a Character\n\nvec &lt;- c(1.5, \"a\")\nprint(vec)  # Output: \"1.5\" \"a\"\n\n[1] \"1.5\" \"a\"  \n\n\nEl número 1.5 se convierte a la cadena de texto “1.5”.\n\n\n2.5.4 4. Coerción de diferentes tipos en una lista\n\nvec &lt;- list(1, \"a\", TRUE)\nprint(vec)  # Output: [[1]] 1 [[2]] \"a\" [[3]] TRUE\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1] TRUE\n\n\nEn una lista, los elementos no se fuerzan a un tipo común; cada elemento puede mantener su tipo de datos original."
  },
  {
    "objectID": "primerospasos.html#coerción-explícita",
    "href": "primerospasos.html#coerción-explícita",
    "title": "2  Tipos de datos",
    "section": "2.6 Coerción Explícita",
    "text": "2.6 Coerción Explícita\nAdemás de la coerción automática, R también permite realizar coerciones explícitas usando funciones específicas como as.numeric(), as.character(), as.integer(), etc.\nEjemplo de Coerción Explícita\n\nvec &lt;- c(\"1\", \"2\", \"3\")\nnumeric_vec &lt;- as.numeric(vec)\nprint(numeric_vec)  # Output: 1 2 3\n\n[1] 1 2 3\n\n\nAquí, as.numeric(vec) convierte explícitamente el vector de caracteres vec en un vector numérico.\nNotas Importantes\nNA (Not Available): Durante la coerción, si algún elemento no puede convertirse correctamente, R genera un valor NA y generalmente emite una advertencia.\nFactores: Cuando se trabaja con factores, coercionarlos a otros tipos puede requerir pasos adicionales, como primero convertir el factor a carácter antes de convertirlo a numérico.\nEjemplo\n\nfactor_vec &lt;- factor(c(\"1\", \"2\", \"3\"))\nchar_vec &lt;- as.character(factor_vec)\nnumeric_vec &lt;- as.numeric(char_vec)\nprint(numeric_vec)  # Output: 1 2 3\n\n[1] 1 2 3"
  },
  {
    "objectID": "primerospasos.html#manipular-vectores",
    "href": "primerospasos.html#manipular-vectores",
    "title": "2  Tipos de datos",
    "section": "2.7 Manipular vectores",
    "text": "2.7 Manipular vectores\nPuedes manipular vectores de varias maneras, incluyendo seleccionar elementos, sumar y restar elementos, y más.\n\n# Selección del primer elemento\nprimer_elemento &lt;- numeros[1]\nprint(primer_elemento)\n\n[1] 1\n\n# Selección de múltiples elementos\nprimeros_tres &lt;- numeros[1:3]\nprint(primeros_tres)\n\n[1] 1 2 3\n\n\n\n2.7.1 Suma de vectores\n\n# Suma de vectores\nsuma &lt;- numeros + c(1, 1, 1, 1, 1)\nprint(suma)\n\n[1] 2 3 4 5 6\n\n# Producto de vectores\nproducto &lt;- numeros * c(2, 2, 2, 2, 2)\nprint(producto)\n\n[1]  2  4  6  8 10\n\n\n\n\n2.7.2 Filtrar vectores\n\n# Filtrar valores mayores que 2\nmayores_que_dos &lt;- numeros[numeros &gt; 2]\nprint(mayores_que_dos)\n\n[1] 3 4 5\n\n# Filtrar valores iguales a TRUE\nverdaderos &lt;- logicos[logicos == TRUE]\nprint(verdaderos)\n\n[1] TRUE TRUE"
  },
  {
    "objectID": "primerospasos.html#lista",
    "href": "primerospasos.html#lista",
    "title": "2  Tipos de datos",
    "section": "2.8 Lista",
    "text": "2.8 Lista\nEn R, una lista es una estructura de datos versátil que puede contener elementos de diferentes tipos, por ejemplo, vectores, matrices, data frames, e incluso otras listas. Esto la vuelve óptima para organizar y manipular datos heterogéneos.\nConcepto de list()\nUna lista en R se crea utilizando la función list(). A diferencia de los vectores, que deben contener elementos del mismo tipo, las listas pueden contener elementos de diferentes tipos. Cada elemento de una lista puede ser referenciado mediante índices o nombres.\nEjemplo de Creación de una Lista\n\nlista1 &lt;- list(\n  numero = 1,\n  nombre = \"Juan\",\n  vector = c(1, 2, 3),\n  matriz = matrix(1:4, nrow = 2),\n  lista_anidada = list(a = 10, b = 20)\n)\n\n\nprint(lista1)\n\n$numero\n[1] 1\n\n$nombre\n[1] \"Juan\"\n\n$vector\n[1] 1 2 3\n\n$matriz\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$lista_anidada\n$lista_anidada$a\n[1] 10\n\n$lista_anidada$b\n[1] 20\n\n\nAcceso a Elementos de una Lista Puedes acceder a los elementos de una lista utilizando el operador de doble corchete [[ ]] o el operador de signo de dólar $.\nAcceso por Índice\n\nprint(lista1[[1]])  # [1] 1\n\n[1] 1\n\nprint(lista1[[3]])  # [1] 1 2 3\n\n[1] 1 2 3\n\n\nAcceso por nombre\n\nprint(lista1$nombre)  # [1] \"Juan\"\n\n[1] \"Juan\"\n\nprint(lista1$vector)  # [1] 1 2 3\n\n[1] 1 2 3"
  },
  {
    "objectID": "primerospasos.html#data.frame",
    "href": "primerospasos.html#data.frame",
    "title": "2  Tipos de datos",
    "section": "2.9 data.frame",
    "text": "2.9 data.frame\nUn data.frame en R es una estructura de datos fundamental y muy versátil que se utiliza para almacenar datos tabulares. Es similar a una tabla en una base de datos o una hoja de cálculo en Excel, donde cada columna puede contener un tipo diferente de datos (numéricos, caracteres, factores, etc.), pero todos los elementos de una columna deben ser del mismo tipo.\nConcepto de data.frame\nUn data.frame es esencialmente una lista de vectores de igual longitud, donde cada vector representa una columna de datos y cada elemento dentro del vector representa una fila. Los data.frames son utilizados ampliamente en R para la manipulación y análisis de datos.\nCreación de un data.frame\nPuedes crear un data.frame utilizando la función data.frame().\n\n# Crear un data frame simple\ndf &lt;- data.frame(\n  nombre = c(\"Ana\", \"Luis\", \"Marta\", \"Juan\"),\n  edad = c(23, 35, 29, 40),\n  salario = c(50000, 60000, 70000, 80000)\n)\nprint(df)\n\n  nombre edad salario\n1    Ana   23   50000\n2   Luis   35   60000\n3  Marta   29   70000\n4   Juan   40   80000"
  },
  {
    "objectID": "historia.html",
    "href": "historia.html",
    "title": "3  Historia",
    "section": "",
    "text": "4 Un poco de historia de R (o R en la historia)\nEl lenguaje R, creado en la década de 1990 por Ross Ihaka y Robert Gentleman, emerge en un contexto diferente, marcado por la globalización y la revolución informática. R fue diseñado como una herramienta para el análisis estadístico y la visualización de datos, promoviendo una democratización del conocimiento técnico. Sin embargo, desde una perspectiva crítica (o marxista), es crucial cuestionar quién controla y se beneficia de estas herramientas. Aunque R es de código abierto y accesible, su adopción está en gran medida mediada por instituciones académicas y corporativas que dominan la producción de conocimiento y, por ende, perpetúan ciertas relaciones de poder.\nAdemás, el auge de lenguajes de programación como R puede interpretarse como parte de una lógica capitalista que busca constantemente innovar y optimizar, pero que también puede conducir a una precarización laboral en sectores tecnológicos. La constante demanda de nuevos conocimientos y habilidades en programación refleja una dinámica de explotación donde quien trabaja debe adaptarse continuamente para mantenerse ‘relevante’ en el mercado laboral.\nSi bien R es un lenguaje de código abierto, su uso se ha visto influenciado por la creciente mercantilización del conocimiento y la proliferación de software propietario en el ámbito del análisis de datos. Las grandes empresas tecnológicas han invertido en el desarrollo de herramientas y plataformas comerciales que, si bien se basan en R, buscan capturar y controlar el flujo de datos y análisis. La proliferación de datos masivos (Big Data) y la inteligencia artificial plantean nuevas formas de explotación y vigilancia, que deben ser analizadas desde una perspectiva crítica.\nLa estandarización de ciertos lenguajes, la propiedad intelectual y las licencias de software son aspectos que revelan cómo el poder se configura y se mantiene en el ámbito tecnológico. En este sentido, la historia de la programación es una ventana para comprender las intersecciones entre tecnología, economía y sociedad, y para cuestionar las estructuras que determinan quién tiene acceso y control sobre las herramientas que moldean nuestro mundo.\nLa división del trabajo intelectual y manual, característica del capitalismo, se replica en el ámbito de la programación. Los “arquitectos” del software, en su mayoría provenientes de élites académicas, diseñan sistemas que luego son implementados por programadores, quienes a menudo enfrentan condiciones laborales precarias y alienantes. Esta división jerárquica perpetúa la desigualdad y limita la participación democrática en la creación tecnológica.\nEn síntesis el enfoque que proponemos considera crucial desmitificar la idea de que la tecnología es neutral o inherentemente beneficiosa. La programación, como herramienta, puede ser utilizada para fines emancipatorios o para reforzar las estructuras de opresión."
  },
  {
    "objectID": "historia.html#un-poco-de-historia-de-la-programación",
    "href": "historia.html#un-poco-de-historia-de-la-programación",
    "title": "3  Historia",
    "section": "3.1 Un poco de historia de la programación",
    "text": "3.1 Un poco de historia de la programación\nLa narrativa tradicional presenta la historia de la programación como una marcha triunfal hacia la eficiencia y la automatización. Sin embargo, esta visión ignora las complejas relaciones sociales, económicas y políticas que han moldeado este campo.\nLa historia de la programación es una narrativa intrínsecamente ligada a las dinámicas sociales y económicas que han moldeado nuestro mundo contemporáneo. Desde sus inicios, la programación ha servido no solo como una herramienta técnica, sino también como un reflejo de las estructuras de poder y las relaciones de producción imperantes.\nEste contexto histórico ha dejado una huella profunda en la cultura de la programación. La búsqueda de la eficiencia y la optimización, a menudo a expensas de la legibilidad y la accesibilidad del código, refleja la lógica capitalista de maximizar la producción y minimizar los costos.\nAdemás, la programación ha estado tradicionalmente dominada por una élite técnica, en su mayoría hombres blancos de países desarrollados. Esta falta de diversidad ha perpetuado sesgos y desigualdades en el acceso y uso de la tecnología.\nEn sus albores, la programación surgió en un contexto de industrialización y expansión capitalista, donde la eficiencia y la productividad eran imperativos. Los primeros lenguajes de programación, como Fortran y COBOL, fueron desarrollados para optimizar procesos industriales y administrativos, facilitando así la consolidación de grandes corporaciones y la centralización del control económico. Este enfoque técnico reflejaba una visión mecanicista de la sociedad, donde el ser humano se veía subordinado a las máquinas y a los imperativos del capital.\nLa programación no es neutral. Las decisiones sobre qué problemas se abordan, cómo se diseñan las interfaces y quién tiene acceso a la tecnología reflejan las agendas de quienes la crean. En muchos casos, estas agendas están ligadas al poder, el control y el beneficio económico. La creciente influencia de las grandes empresas tecnológicas plantea preguntas sobre la privacidad, la manipulación y el impacto social de la programación.\nEn este sentido, es crucial mantener una mirada crítica sobre el desarrollo y uso de R, y de cualquier lenguaje de programación. Debemos preguntarnos:¿quién controla el acceso a estas herramientas? ¿Cómo se utilizan para generar y distribuir conocimiento? ¿Quiénes se benefician de su uso?"
  },
  {
    "objectID": "historia.html#algunos-puntos-adicionales-a-considerar",
    "href": "historia.html#algunos-puntos-adicionales-a-considerar",
    "title": "3  Historia",
    "section": "3.2 Algunos puntos adicionales a considerar:",
    "text": "3.2 Algunos puntos adicionales a considerar:\n\nEl papel del colonialismo: La historia de la programación está entrelazada con la expansión colonial. La necesidad de administrar y controlar vastos territorios impulsó el desarrollo de tecnologías de la información, como el telégrafo y las máquinas tabuladoras.\nLa brecha digital: A pesar de los avances tecnológicos, el acceso a la programación y a las herramientas digitales sigue siendo desigual. La brecha digital perpetúa la exclusión y limita las oportunidades para las comunidades marginadas.\nEl impacto ambiental: La producción de hardware y el consumo energético de las computadoras tienen un impacto significativo en el medio ambiente. Una mirada crítica debe considerar la sostenibilidad de la industria tecnológica."
  },
  {
    "objectID": "historia.html#orígenes-de-r",
    "href": "historia.html#orígenes-de-r",
    "title": "3  Historia",
    "section": "4.1 Orígenes de R",
    "text": "4.1 Orígenes de R\nR es un lenguaje y entorno de programación para análisis estadístico y gráficos. Surgió a principios de la década de 1990 como una implementación del lenguaje S, que fue desarrollado en los Laboratorios Bell por John Chambers y sus colegas. Como ya se dijo, R fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, y fue lanzado como software libre bajo la licencia GNU General Public License en 1995.\n\n4.1.1 Principales Hitos\n\n1995: Primera versión pública de R.\n2000: Se lanza la versión 1.0.0 de R, marcando su madurez - como herramienta de análisis estadístico.\n2004: R se convierte en el lenguaje más utilizado en el Proyecto de Análisis Estadístico de Google.\n2010: Revolution Analytics (ahora parte de Microsoft) comienza a ofrecer soporte comercial para R.\n2015: Microsoft adquiere Revolution Analytics, impulsando el uso de R en el ámbito empresarial.\n2017: RStudio (el IDE más usado para R) lanza RStudio Server Pro, facilitando el uso de R en entornos de producción.\n2023: Rstudio (Antes así se llamaba la empresa y el IDE) cambia su nombre a POSIT y comienza a desarrollar RStudio con orientación al uso multilenguaje."
  },
  {
    "objectID": "historia.html#usabilidad",
    "href": "historia.html#usabilidad",
    "title": "3  Historia",
    "section": "4.2 Usabilidad",
    "text": "4.2 Usabilidad\nR es conocido por su facilidad para el análisis estadístico y la visualización de datos. Su usabilidad se ve reforzada por una comunidad activa que contribuye con paquetes adicionales que extienden su funcionalidad. R es especialmente apreciado en la academia y en la industria por su capacidad de manejar grandes conjuntos de datos y por sus capacidades gráficas avanzadas."
  },
  {
    "objectID": "historia.html#usos-más-populares",
    "href": "historia.html#usos-más-populares",
    "title": "3  Historia",
    "section": "4.3 Usos Más Populares",
    "text": "4.3 Usos Más Populares\nAnálisis Estadístico: R ofrece una amplia gama de técnicas estadísticas, incluyendo modelos lineales y no lineales, pruebas estadísticas clásicas, análisis de series temporales, clasificación y agrupamiento.\nVisualización de Datos: Paquetes como ggplot2 permiten crear visualizaciones de datos sofisticadas y personalizadas.\nCiencia de Datos: R es ampliamente utilizado para el análisis de datos en la ciencia de datos, incluyendo minería de datos y machine learning."
  },
  {
    "objectID": "historia.html#para-profundizar..",
    "href": "historia.html#para-profundizar..",
    "title": "3  Historia",
    "section": "4.4 Para profundizar..",
    "text": "4.4 Para profundizar..\nSi quieres conocer más sobre los enfoques críticos en cuanto a comunicación, tecnología, programación y lucha de clases, puedes revisar el trabajo de Wendy Hui Kyong Chun, Safiya Noble, Judith Sutz, Pedro Demo y no olvides que: siempre es recomendable volver a los clásicos: El Capital\n\n4.4.1 Algunos textos y libros adicionales:\n\nCyber-Marx: Cycles and circuits of struggle in high technology capitalism - Nick Dyer-Witheford.\nLa Condición de la Posmodernidad - David Harvey\nA dependência tecnologica segundo a dialéctica da dependência de Ruy Mauro Marini\nDesenvolvimento e dependência - Ruy Mauro Marini\n\nTambién puede ser útil visitar Revista Chasqui de Ecuador"
  },
  {
    "objectID": "rbase.html#características-de-r-base",
    "href": "rbase.html#características-de-r-base",
    "title": "4  ¿Qué es R Base?",
    "section": "4.1 Características de R Base",
    "text": "4.1 Características de R Base\nManipulación de Datos: Funciones para manejar estructuras de datos como vectores, matrices, listas y data frames. Estadísticas Básicas: Funciones para cálculos estadísticos como media, mediana, varianza, y desviación estándar. Gráficos: Herramientas para crear gráficos básicos como histogramas, diagramas de dispersión, y gráficos de líneas. Programación: Funciones de control de flujo, bucles, y la capacidad de definir funciones personalizadas."
  },
  {
    "objectID": "rbase.html#ejemplo-r-base",
    "href": "rbase.html#ejemplo-r-base",
    "title": "4  ¿Qué es R Base?",
    "section": "4.2 Ejemplo R base",
    "text": "4.2 Ejemplo R base\n\n# Crear un vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n\n# Calcular la media del vector\nmedia_numeros &lt;- mean(numeros)\n\n# Crear un gráfico de dispersión\nplot(numeros, main=\"Gráfico de Dispersión\", xlab=\"Índice\", ylab=\"Valor\")"
  },
  {
    "objectID": "rbase.html#manipulaciones-de-tablas-con-r-base",
    "href": "rbase.html#manipulaciones-de-tablas-con-r-base",
    "title": "4  ¿Qué es R Base?",
    "section": "4.3 Manipulaciones de tablas con R base",
    "text": "4.3 Manipulaciones de tablas con R base\n\n# Crear un data.frame o tabla\n\ndf &lt;- data.frame(\n  nombre = c(\"Ana\", \"Luis\", \"Marta\", \"Juan\"),\n  edad = c(23, 35, 29, 40),\n  salario = c(50000, 60000, 70000, 80000)\n)\n\n# Crear un data frame\ntabla1 &lt;- data.frame(dia = c(\"Lunes\", \"Martes\", \"Miercoles\", \"Jueves\"),\n           obs = c( 10, 11, \"hola\", 22))\n\ntabla1\n\n        dia  obs\n1     Lunes   10\n2    Martes   11\n3 Miercoles hola\n4    Jueves   22\n\n\nAlgo importante a tener en cuenta es que para construir un data.frame o tabla es necesario tener vectores de una longitud similar. Los vectores pueden tener distintos elementos como ´numeric´o ´character´ sin embargo, se aplicarán las reglas de coerción.\n\n# Para ver una columna específica de una tabla podemos utilizar el operador ´$´\n\nclass(tabla1$dia)\n\n[1] \"character\"\n\nclass(tabla1$obs)\n\n[1] \"character\"\n\n# En este caso utilizamos un función de la familia ´as.´ para convertir el vector en numeric. Dado que el vector tiene numero y un palabra ´´hola´\n#esta palabra se convierte en NA pues no se puede transformar a numeric.\nclass(as.numeric(tabla1$obs))\n\nWarning: NAs introducidos por coerción\n\n\n[1] \"numeric\"\n\n# Convertir numerico obs\ntabla1$obs &lt;- as.numeric(tabla1$obs)\n\nWarning: NAs introducidos por coerción\n\n# Revisamos la clase de la columna del objeto.\nclass(tabla1$obs)\n\n[1] \"numeric\"\n\n#Promedio \nmean(tabla1$obs, na.rm = TRUE)\n\n[1] 14.33333\n\n\n\n4.3.1 Manipulación de tablas con paquete ´dplyr´\n\n# Cargamos la libreria ´dplyr´ y ´clipr´\n\nlibrary(dplyr)\n\n\nAdjuntando el paquete: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(clipr)\n\nWelcome to clipr. See ?write_clip for advisories on writing to the clipboard in R.\n\n# Operador ´pipe´ tiene uso en \"Rbase\" y en \"tidyverse\" con el paquete magrittr\n\n#rbase    # magrittr\n#  |&gt;     # %&gt;%\n\n# Creamos un nuevo objeto utilizando la pipe\nobjeto1 &lt;- tabla1 |&gt; # acá asignamos un nuevo objeto \"objeto1\", desde \"tabla1\"\ndplyr::filter(!is.na(obs)) |&gt;  # se realiza un filtro para quitar \"NA\" en col \"obs\"\ndplyr::summarise(# Se realiza resumen con medidas\n                promedio = mean(obs, na.rm = TRUE), # promedio\n                mediana = median(obs, na.rm = TRUE), # mediana\n                numero   = n()) |&gt; #conteo\ndplyr::rename(Media = promedio) # se renombra la columna promedio como \"Media\"\n\n# También es posible utilizar pipe en rbase, pero solo la del estilo \" |&gt; \"\nobjeto1$Media |&gt; class()\n\n[1] \"numeric\"\n\n# Con clipr se puede copiar el objeto rapidamente para pegar en excel y otro\n# clipr::write_clip(objeto1)\n\n# Con esta función se puede conocer el directorio de trabajo actual\ngetwd()\n\n[1] \"C:/Users/rgalv/Nextcloud/PrimerosPasosR/PrimeroPasosEnR\""
  },
  {
    "objectID": "rbase.html#guardar-o-exportar-una-tabla-o-data.frame",
    "href": "rbase.html#guardar-o-exportar-una-tabla-o-data.frame",
    "title": "4  ¿Qué es R Base?",
    "section": "4.4 Guardar o exportar una tabla o data.frame",
    "text": "4.4 Guardar o exportar una tabla o data.frame\nEs posible guardar un objeto de R en diversos formatos. En el caso de que sean objetos como tablas de datos o bases de datos, que no se trabajarán otro lenguaje, puede ser recomendable almacenarlos en formato ´.rds´ que es el nativo de R y permite mejor velocidad de lectura y escritura, además menos tamaño en disco.\nTambién es posible guardar los archivos en formato ´.csv´ u otros. Generalmente esto se puede hacer con las funciones ´write.´ o ´save´\n\n# Guardar RDS\nsaveRDS(objeto1, \"objeto1.rds\")\n\n# Guardar objeto1 como un csv\nwrite.csv2(x = objeto1,  # corresponde al objeto a exportar \n          file = \"objeto1.csv\", # define el nombre que tendrá el archivo exportado \n          dec = \",\", # define que para decimales se utilice ´,´\n          sep = \";\", # define que el separador sea ´;´\n          row.names = FALSE)\n\nWarning in write.csv2(x = objeto1, file = \"objeto1.csv\", dec = \",\", sep = \";\",\n: attempt to set 'sep' ignored\n\n\nWarning in write.csv2(x = objeto1, file = \"objeto1.csv\", dec = \",\", sep = \";\",\n: attempt to set 'dec' ignored\n\n\n\n4.4.0.1 Manipulación Rbase\nPara los siguientes ejercicios se utilizará el paquete ´cars´ que viene incorporado en R.\n\n# Manipular datos\nclass(cars$dist)\n\n[1] \"numeric\"\n\n# Filtro\ncars$speed[cars$speed &gt; 10 & cars$dist &gt; 20]\n\n [1] 11 12 12 13 13 13 13 14 14 14 14 15 15 16 16 17 17 17 18 18 18 18 19 19 19\n[26] 20 20 20 20 20 22 23 24 24 24 24 25\n\n# Crea nuevo objeto a partir de filtro\ncars2 &lt;- cars[1:15, 1:2]\n\n# Los valores mayores a 10 de la columna speed se reemplazan con ´NA´\ncars2$speed[cars2$speed&gt;10] &lt;- NA\n\n# Para trabajar con esta sintaxis es importante considerar que\n# en el interior de los corchetes se sigue el orden [filas, columnas]\n# objeto[f,c]\n\n# El dato que está en la tercera fila, de la segunda columna\ncars[3,2]\n\n[1] 4\n\n# Filtro de rango de los datos que están entre las filas 1 a la 4 y columnas 1 y 2\ncars[1:4, 1:2]\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n\n# Usando vector\ncars[c(1,4), c(1,2)]\n\n  speed dist\n1     4    2\n4     7   22\n\n# Para crear una tabla de contingencia se puede utilizar la función ´table()´\ntable(cars2$speed)\n\n\n 4  7  8  9 10 \n 2  2  1  1  3 \n\nprop.table(table(iris$Species))\n\n\n    setosa versicolor  virginica \n 0.3333333  0.3333333  0.3333333 \n\ntable(iris$Species, iris$Petal.Length)\n\n            \n              1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.9  3 3.3 3.5 3.6 3.7 3.8 3.9  4\n  setosa      1   1   2   7  13  13   7   4   2  0   0   0   0   0   0   0  0\n  versicolor  0   0   0   0   0   0   0   0   0  1   2   2   1   1   1   3  5\n  virginica   0   0   0   0   0   0   0   0   0  0   0   0   0   0   0   0  0\n            \n             4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9  5 5.1 5.2 5.3 5.4 5.5 5.6 5.7\n  setosa       0   0   0   0   0   0   0   0   0  0   0   0   0   0   0   0   0\n  versicolor   3   4   2   4   7   3   5   2   2  1   1   0   0   0   0   0   0\n  virginica    0   0   0   0   1   0   0   2   3  3   7   2   2   2   3   6   3\n            \n             5.8 5.9  6 6.1 6.3 6.4 6.6 6.7 6.9\n  setosa       0   0  0   0   0   0   0   0   0\n  versicolor   0   0  0   0   0   0   0   0   0\n  virginica    3   2  2   3   1   1   1   2   1"
  },
  {
    "objectID": "rbase.html#ciclo-for",
    "href": "rbase.html#ciclo-for",
    "title": "4  ¿Qué es R Base?",
    "section": "4.5 Ciclo for",
    "text": "4.5 Ciclo for\nUn bucle for en R permite ejecutar repetidamente un bloque de código un número específico de veces.\n\n4.5.1 Estructura básica del bucle for\nLa estructura básica del cilo for se describe de la siguiente forma: for (variable in secuencia){ operaciones }\n\n# for (variable in secuencia) {\n#       Código a ejecutar\n# }\n\n\nVariable: Es una variable que toma los valores de cada elemento en la secuencia.\nSecuencia: Es un vector que contiene los valores que la variable tomará sucesivamente.\nCódigo a ejecutar: Es el bloque de código que se ejecutará en cada iteración del bucle.\n\nEjemplo 1: Iteración en una secuencia\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nEn este caso, i tomará cada valor en la secuencia 1, 2, 3, 4, 5, y print(i) se ejecutará en cada iteración, imprimiendo cada número.\nEjemplo 2: Iteración en un vector\n\n# Crea un vector numérico\nnumeros &lt;- c(2, 4, 6, 8, 10)\n# Realiza el bucle para imprimir los valores del vector\nfor (num in numeros) {\n  print(num)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nEjemplo 3: Operaciones dentro del bucle\n\nnumeros &lt;- c(1, 2, 3, 4, 5)\nfor (num in numeros) {\n  cuadrado &lt;- num^2 # Operación\n  print(paste(\"El cuadrado de\", num, \"es\", cuadrado)) \n}\n\n[1] \"El cuadrado de 1 es 1\"\n[1] \"El cuadrado de 2 es 4\"\n[1] \"El cuadrado de 3 es 9\"\n[1] \"El cuadrado de 4 es 16\"\n[1] \"El cuadrado de 5 es 25\"\n\n\nEjemplo 4: Bucles anidados\n\nfor (i in 1:5) {\n  for (j in 1:5) {\n    resultado &lt;- i * j\n    print(paste(i, \"x\", j, \"=\", resultado))\n  }\n}\n\n[1] \"1 x 1 = 1\"\n[1] \"1 x 2 = 2\"\n[1] \"1 x 3 = 3\"\n[1] \"1 x 4 = 4\"\n[1] \"1 x 5 = 5\"\n[1] \"2 x 1 = 2\"\n[1] \"2 x 2 = 4\"\n[1] \"2 x 3 = 6\"\n[1] \"2 x 4 = 8\"\n[1] \"2 x 5 = 10\"\n[1] \"3 x 1 = 3\"\n[1] \"3 x 2 = 6\"\n[1] \"3 x 3 = 9\"\n[1] \"3 x 4 = 12\"\n[1] \"3 x 5 = 15\"\n[1] \"4 x 1 = 4\"\n[1] \"4 x 2 = 8\"\n[1] \"4 x 3 = 12\"\n[1] \"4 x 4 = 16\"\n[1] \"4 x 5 = 20\"\n[1] \"5 x 1 = 5\"\n[1] \"5 x 2 = 10\"\n[1] \"5 x 3 = 15\"\n[1] \"5 x 4 = 20\"\n[1] \"5 x 5 = 25\"\n\n\nEn este caso, el bucle interno recorre los valores del 1 al 5 para cada valor del bucle externo, generando una tabla de multiplicar."
  },
  {
    "objectID": "rbase.html#sintaxis-básica-de-una-función-en-r",
    "href": "rbase.html#sintaxis-básica-de-una-función-en-r",
    "title": "4  ¿Qué es R Base?",
    "section": "4.6 Sintaxis básica de una función en R",
    "text": "4.6 Sintaxis básica de una función en R\nLas funciones en R son fundamentales para estructurar el código y hacerlo reutilizable. Utilizar paquetes como purrr y kableExtra nos permite ampliar las capacidades de R para manejar listas y generar tablas con estilo, respectivamente. Al seguir una estructura clara y consistente, podemos desarrollar código R eficiente y fácil de mantener.\nPara definir una función en R, Se utiliza la palabra clave function. Aquí tienes la estructura básica:\n\nnombre_de_la_funcion &lt;- function(argumento1, argumento2, ...) {\n  # Cuerpo de la función\n  # Código a ejecutar\n  resultado &lt;- argumento1 + argumento2\n  return(resultado)\n}\n\nEjemplo: Crear una función para sumar dos números\n\nsuma &lt;- function(a, b) {\n  resultado &lt;- a + b\n  return(resultado)\n}\n\n# Usar la función\nsuma(3, 5) # Devuelve 8\n\n[1] 8\n\n\n\n4.6.1 Funciones con valores predeterminados\nSe pueden establecer valores predeterminados para los argumentos de una función:\n\nsuma &lt;- function(a = 1, b = 1) {\n  resultado &lt;- a + b\n  return(resultado)\n}\n\n# Usar la función con valores predeterminados\nsuma() # Devuelve 2\n\n[1] 2\n\n\n\n\n4.6.2 Funciones dentro de funciones\nEn R, también se puede definir funciones dentro de otras funciones:\n\noperacion &lt;- function(a, b) {\n  suma &lt;- function(x, y) {\n    return(x + y)\n  }\n  producto &lt;- function(x, y) {\n    return(x * y)\n  }\n  resultado_suma &lt;- suma(a, b)\n  resultado_producto &lt;- producto(a, b)\n  return(list(suma = resultado_suma, producto = resultado_producto))\n}\n\n# Usar la función\noperacion(3, 5) # Devuelve una lista con la suma y el producto\n\n$suma\n[1] 8\n\n$producto\n[1] 15\n\n\n\n\n4.6.3 Funciones anónimas\nLas funciones anónimas (también conocidas como funciones lambda) son útiles para operaciones rápidas y se utilizan a menudo con funciones de orden superior como apply, lapply, sapply, entre otras.\n\n# Usar una función anónima para elevar al cuadrado los elementos de un vector\nvector &lt;- c(1, 2, 3, 4)\nresultado &lt;- sapply(vector, function(x) x^2)\nprint(resultado) # Devuelve c(1, 4, 9, 16)\n\n[1]  1  4  9 16\n\n\n\n\n4.6.4 Ejemplo avanzado con purrr\nEl paquete purrr de tidyverse proporciona una forma funcional de trabajar con listas y vectores. Aquí hay un ejemplo de cómo usar una función personalizada con map:\n\nlibrary(purrr)\n\n# Definir una función para multiplicar por 2\nmultiplicar_por_dos &lt;- function(x) {\n  return(x * 2)\n}\n\n# Usar map para aplicar la función a cada elemento de una lista\nlista &lt;- list(1, 2, 3, 4)\nresultado &lt;- map(lista, multiplicar_por_dos)\nprint(resultado) # Devuelve una lista con elementos multiplicados por 2\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8"
  },
  {
    "objectID": "presentacion.html#funciones-con-kableextra",
    "href": "presentacion.html#funciones-con-kableextra",
    "title": "5  Presentaciones en RMarkdown",
    "section": "5.1 Funciones con kableExtra",
    "text": "5.1 Funciones con kableExtra\nPara crear tablas en formato LaTeX o HTML con el paquete kableExtra, primero definimos los datos y luego aplicamos las funciones del paquete para formatear la tabla.\n\n# Para instalar paquete \"kableExtra\" en caso de ser necesario\n\npaquetes &lt;- c(\"kableExtra\", \"DT\", \"htmlwidgets\")\n\n# Función para instalar y cargar paquetes\ninstall_carga &lt;- function(paquetes) {\n  if (!require(paquetes, character.only = TRUE)) {\n    install.packages(paquetes)\n    library(paquetes, character.only = TRUE)\n  }\n}\n\n# Aplicar la función a cada paquete de la lista\nlapply(paquetes, install_carga)\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n# Carga libreria\nlibrary(kableExtra)\n\n# Definir datos\ndt &lt;- mtcars[1:5, 1:6]\n\n# Crear una tabla con estilo en LaTeX\nkbl(dt, booktabs = TRUE) %&gt;%\n  kable_styling(latex_options = \"striped\")\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n\n\n\n\n\n\n\nEjemplo de tabla con estilos\n\n# Definir los datos\ndt &lt;- mtcars[1:5, 1:6]\n\n# Crear una tabla con múltiples estilos\nkbl(dt, booktabs = TRUE, \n    caption = \"Tabla de Ejemplo con Estilos\") %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    full_width = FALSE,\n    position = \"center\",\n    font_size = 10\n  ) %&gt;%\n  add_header_above(c(\" \", \"Grupo 1\" = 3, \"Grupo 2\" = 3)) %&gt;%\n  column_spec(1, bold = TRUE, color = \"red\",\n              background = \"yellow\") %&gt;%\n  column_spec(2, width = \"5em\") %&gt;%\n  row_spec(0, bold = TRUE, color = \"white\",\n           background = \"#D7261E\") %&gt;%\n  row_spec(1:5, background = \"#F7F7F7\")\n\n\nTabla de Ejemplo con Estilos\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrupo 1\n\n\nGrupo 2\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n\n\n\n\n\n\n\n \nExplicación de los Estilos\n\nbooktabs: Utiliza el paquete booktabs para mejorar el diseño de la tabla.\nbootstrap_options: Añade varias opciones de estilo como striped (filas alternas de color), hover (resaltar filas al pasar el mouse) y condensed (espaciado reducido).\nfull_width: Ajusta la tabla para que no ocupe todo el ancho disponible.\nposition: Define la posición de la tabla, en este caso centra la tabla en la página.\nfont_size: Cambia el tamaño de la fuente de la tabla.\nadd_header_above: Añade un encabezado adicional encima de la tabla para agrupar columnas.\ncolumn_spec: Especifica estilos para columnas individuales. En este caso, la primera columna es negrita, roja y con fondo amarillo, y la segunda columna tiene un ancho específico.\nrow_spec: Especifica estilos para filas individuales. La fila de encabezado (0) es negrita, blanca con fondo rojo oscuro, y las filas 1 a 5 tienen un fondo gris claro."
  },
  {
    "objectID": "presentacion.html#tablas-dinámicas-en-r",
    "href": "presentacion.html#tablas-dinámicas-en-r",
    "title": "5  Presentaciones en RMarkdown",
    "section": "5.2 Tablas dinámicas en R",
    "text": "5.2 Tablas dinámicas en R\nPodemos crear una tabla dinámica utilizando una combinación de DT::datatable y el data.frame que queramos visualizar de manera interactiva. A continuación, se muestra un ejemplo utilizando el conjunto de datos ‘mtcars’.\n\n# Cargar los datos\ndata(\"mtcars\")\n\n# Crear una tabla dinámica\nDT::datatable(mtcars, \n          options = list(pageLength = 5, \n                         autoWidth = TRUE, \n                         dom = 'Bfrtip', \n                         buttons = c('copy', \n                                     'csv', 'excel', \n                                     'pdf', 'print')))\n\n\n\n\n\n\n\n5.2.1 Tabla dinámica con estilos\n\n# Instalación y carga de paquetes\n#install.packages(\"DT\")\nlibrary(DT)\n\n# Cargar los datos\ndata(\"mtcars\")\n\n# Crear una tabla dinámica con personalización adicional\ndatatable(mtcars, \n          options = list(\n            pageLength = 5,  # Número de filas por página\n            autoWidth = TRUE,  # Ajuste automático del ancho de las columnas\n            dom = 'Bfrtip',  # botones, filtro y paginación\n            buttons = c('copy', 'csv',\n                        'excel', 'pdf',\n                        'print'), # Botones de exportación\n            initComplete = JS(\n              \"function(settings, json) {\",\n              \"$(this.api().table().header()).css({'background-color':\n              'skyblue', 'color': 'black'});\",\n              \"}\"\n            ),\n            className = 'cell-border stripe'  # Clases CSS para las celdas\n          ),\n          class = 'cell-border stripe') %&gt;%\n  formatStyle(\n    'mpg',  # Columna a estilizar\n    backgroundColor = styleInterval(c(20, 30), \n                                    c('yellow', 'orange',\n                                      'skyblue'))\n  )\n\n\n\n\n\n\n\n\n5.2.2 Cambio idioma de la tabla\n\nlibrary(DT)\nlibrary(htmlwidgets)\n\n# Cargar los datos\ndata(\"mtcars\")\n\n# Crear una tabla dinámica con opciones de \n# estilo personalizadas y configuraciones en español\ndatatable(mtcars, \n          extensions = 'Buttons',  # Botones de exportación disponibles\n          options = list(\n            pageLength = 5,  # Número de filas por página\n            autoWidth = TRUE,  # Ajuste automático del ancho de las columnas\n            dom = 'Bfrtip',  # Botones, filtro y paginación\n            buttons = list('copy', 'csv', 'excel',\n                           'pdf', 'print'),  # Opciones de exportación\n            language = list(\n              url = \n                '//cdn.datatables.net/plug-ins/1.10.25/i18n/Spanish.json'  \n            ), # Agregar un archivo json de configuración del idioma\n            initComplete = JS(\n              \"function(settings, json) {\",\n              \"$(this.api().table().header()).css({'background-color': \n              '#D7261E', 'color': 'black'});\",\n              \"}\"\n            )\n          ),\n          class = 'cell-border stripe') %&gt;%\n  formatStyle(\n    'mpg',  # Columna a estilizar\n    backgroundColor = styleInterval(c(20, 30), c('yellow', \n                                                 'orange', 'red'))\n  ) %&gt;%\n  htmlwidgets::onRender(\"\n    function(el, x) {\n      $(el).find('.dt-buttons').appendTo(\n      $(el).closest('.dataTables_wrapper').find('.col-md-6:eq(0)') );\n    }\n  \")\n\n\n\n\n\n\n\n\n5.2.3 Agregar titulo a la tabla\n\n# Cargar los datos\ndata(\"mtcars\")\n\n# Crear un contenedor para la tabla y la referencia\nhtmltools::div(\n  datatable(mtcars, \n            extensions = 'Buttons',  # Botones de exportación disponibles\n          options = list(\n            pageLength = 5,  # Número de filas por página\n            autoWidth = TRUE,  # Ajuste automático del ancho de las columnas\n            dom = 'Bfrtip',  # Botones, filtro y paginación\n            buttons = list('copy', 'csv', 'excel',\n                           'pdf', 'print'),  # Opciones de exportación\n            language = list(\n              url = \n                '//cdn.datatables.net/plug-ins/1.10.25/i18n/Spanish.json'  \n            ), # Agregar un archivo json de configuración del idioma\n              initComplete = JS(\n                \"function(settings, json) {\",\n                \"$(this.api().table().header()).css({'background-color':\n                '#D7261E', 'color': '#fff'});\",\n                \"}\"\n              )\n            ),\n            class = 'cell-border stripe', \n            caption = htmltools::tags$caption(\n              style = 'caption-side: top; \n              text-align: center; font-weight: bold;',\n              'Título de la Tabla: Comparación de Características de Vehículos'\n            )\n            ) %&gt;%\n    formatStyle(\n      'mpg',  # Columna a estilizar\n      backgroundColor = styleInterval(c(20, 30), c('yellow', 'orange', 'red'))\n    ) %&gt;%\n    htmlwidgets::onRender(\"\n      function(el, x) {\n        $(el).find('.dt-buttons').appendTo( $(el).closest(\n        '.dataTables_wrapper').find('.col-md-6:eq(0)') );\n      }\n    \"),\n  htmltools::tags$p(\n    style = 'text-align: center; font-style: italic;',\n    'Fuente: mtcars dataset'\n  )\n)\n\n\n\n\n\nFuente: mtcars dataset\n\n\n\n\n\n5.2.4 Referencias y filtros en la tabla\n\n# Cargar los datos\ndata(\"mtcars\")\n\n# Crear un contenedor para la tabla y la referencia\nhtmltools::div(\n  datatable(mtcars, \n            extensions = 'Buttons',  # Botones de exportación disponibles\n          options = list(\n            pageLength = 5,  # Número de filas por página\n            autoWidth = TRUE,  # Ajuste automático del ancho de las columnas\n            dom = 'Bfrtip',  # Botones, filtro y paginación\n            buttons = list('copy', 'csv', 'excel',\n                           'pdf', 'print'),  # Opciones de exportación\n            language = list(\n              url = \n                '//cdn.datatables.net/plug-ins/1.10.25/i18n/Spanish.json'  \n            ), # Agregar un archivo json de configuración del idioma\n              initComplete = JS(\n                \"function(settings, json) {\",\n                \"$(this.api().table().header()).css({\n                'background-color': 'skyblue', 'color': 'black'});\",\n                \"}\"\n              )\n            ),\n            filter = \"top\",  # Filtros en la parte superior de la tabla\n            class = 'cell-border stripe', \n            caption = htmltools::tags$caption(\n              style = 'caption-side: top; text-align:\n              center; font-weight: bold;',\n              'Título de la Tabla: Comparación de Características de Vehículos'\n            )\n            ) %&gt;%\n    formatStyle(\n      'mpg',  # Columna a estilizar\n      backgroundColor = styleInterval(c(20, 30), c('yellow', 'orange', 'red'))\n    ) %&gt;%\n    htmlwidgets::onRender(\"\n      function(el, x) {\n        $(el).find('.dt-buttons').appendTo( $(el).closest(\n        '.dataTables_wrapper').find('.col-md-6:eq(0)') );\n      }\n    \"),\n  htmltools::tags$p(\n    style = 'text-align: center; font-style: italic;',\n    'Fuente: mtcars dataset'\n  )\n)\n\n\n\n\n\nFuente: mtcars dataset"
  },
  {
    "objectID": "referencias.html",
    "href": "referencias.html",
    "title": "Referencias",
    "section": "",
    "text": "Referencias principales para Aprender R\nAquí tienes una lista de recursos esenciales para aprender R, desde libros y tutoriales en línea hasta cursos interactivos y canales de YouTube."
  },
  {
    "objectID": "referencias.html#libros",
    "href": "referencias.html#libros",
    "title": "Referencias",
    "section": "Libros",
    "text": "Libros\n\nR for Data Science por Hadley Wickham y Garrett Grolemund\n\nLibro en línea gratuito Un recurso excelente para principiantes y usuarios intermedios que cubre conceptos de manipulación, visualización y modelado de datos con R.\n\nAdvanced R por Hadley Wickham\n\nLibro en línea gratuito Ideal para aquellos que ya tienen conocimientos básicos de R y desean profundizar en aspectos más avanzados del lenguaje.\n\nEl arte de programar en R por Julio Santana y Efraín Mateos\n\nEnlace en CRAN Cubre una amplia gama de temas, desde los fundamentos hasta técnicas avanzadas de programación en R."
  },
  {
    "objectID": "referencias.html#tutoriales-en-línea",
    "href": "referencias.html#tutoriales-en-línea",
    "title": "Referencias",
    "section": "Tutoriales en Línea",
    "text": "Tutoriales en Línea\n\nSwirl - Learn R, in R\n\nSwirl Un paquete de R que ofrece cursos interactivos directamente en la consola de R.\n\nCoursera: R Programming\n\nCurso en Coursera Un curso ofrecido por la Universidad Johns Hopkins que es parte de la especialización en Ciencia de Datos.\n\nDatacamp: Introduction to R\n\nCurso en Datacamp Curso gratuito introductorio que cubre los conceptos básicos de R."
  },
  {
    "objectID": "referencias.html#canales-de-youtube",
    "href": "referencias.html#canales-de-youtube",
    "title": "Referencias",
    "section": "Canales de YouTube",
    "text": "Canales de YouTube\n\nData School\n\nData School Ofrece tutoriales detallados sobre R y técnicas de ciencia de datos.\n\nR Programming for Data Science\n\nR Programming for Data Science Enfocado en la programación en R para ciencia de datos, con numerosos ejemplos prácticos.\n\nStatQuest with Josh Starmer\n\nStatQuest Explicaciones claras y simples sobre estadísticas y R."
  },
  {
    "objectID": "referencias.html#documentación-oficial",
    "href": "referencias.html#documentación-oficial",
    "title": "Referencias",
    "section": "Documentación Oficial",
    "text": "Documentación Oficial\n\nThe Comprehensive R Archive Network (CRAN)\n\nCRAN La fuente oficial de la documentación de R, incluyendo el manual del usuario y otros recursos útiles.\n\nRStudio Documentation\n\nRStudio Documentation Documentación y guías sobre cómo usar RStudio, el IDE más popular para R."
  },
  {
    "objectID": "referencias.html#blogs-y-comunidades",
    "href": "referencias.html#blogs-y-comunidades",
    "title": "Referencias",
    "section": "Blogs y Comunidades",
    "text": "Blogs y Comunidades\n\nR-Bloggers\n\nR-Bloggers Una agregación de blogs sobre R que cubren una amplia gama de temas, desde tutoriales hasta análisis avanzados.\n\nStack Overflow\n\nStack Overflow Una comunidad de preguntas y respuestas donde puedes encontrar soluciones a problemas comunes y preguntar sobre tus propios desafíos en R."
  },
  {
    "objectID": "referencias.html#recursos-adicionales",
    "href": "referencias.html#recursos-adicionales",
    "title": "Referencias",
    "section": "Recursos Adicionales",
    "text": "Recursos Adicionales\n\nCheat Sheets\n\nRStudio Cheat Sheets Hojas de referencia rápidas para diversos paquetes y funciones de R, proporcionadas por RStudio.\n\nTidyverse\n\nTidyverse Una colección de paquetes de R diseñados para la ciencia de datos, que incluyen ggplot2, dplyr, tidyr, y más."
  }
]